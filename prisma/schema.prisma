// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  name           String
  email          String          @unique
  phone          String
  tickets        Query[]         @relation(name: "UserTickets")
  isAdmin        Boolean
  password       String?
  notification   Boolean?
  group          Group?          @relation(fields: [groupId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  groupId        Int?
  queries        Query[]
  correspondences Correspondence[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Query {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  title          String
  description    String          @db.Text
  origin         String
  applicationId  String
  priority       Priority
  status         Status          @default(NEW)
  type           Type            @default(NONE)
  user           User            @relation(fields: [userid], references: [id], name: "UserTickets", onUpdate: NoAction, onDelete: NoAction)
  userid         Int
  assigned       User?           @relation(fields: [assignedTo], references: [id], onUpdate: NoAction, onDelete: NoAction)
  assignedTo     Int?
  reason         String?         @db.Text
  correspondences Correspondence[]
  files          File[]
  solvedBy       String?         @default("None")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Correspondence {
  id             Int             @id @default(autoincrement()) // Ensure this field is present
  uuid           String?         @unique @default(uuid())
  actionLog      Json?
  comment        String          @db.Text
  actionType     ActionType
  user           User            @relation(fields: [adminId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  adminId        Int
  queries        Query           @relation(fields: [queryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  queryId        Int
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model File {
  id             Int             @id @default(autoincrement()) // Ensure this field is present
  path           String
  query          Query           @relation(fields: [queryId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  queryId        Int
}

model Group {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  admins         User[]
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Status {
  NEW
  INPROGRESS
  SOLVED
  REOPEN
}

enum Type {
  NONE
  BUG
  SALES
}

enum ActionType {
  PRIORITY
  STATUS
  TYPE
  ASSIGNED
  REOPEN
  MULTIPLE
  OTHER
}
